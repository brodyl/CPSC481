@using Microsoft.AspNetCore.Components
@using MudBlazor
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer
@inject IDialogService DialogService

@* If multiple customers on the order, we create the dyanmic screen with drag/drop and collapsable menu features *@
@if (@StateContainer._customers.Count > 1)
{
<MudDropContainer T="DropItem" Items="@StateContainer._items" ItemsSelector="@((item, dropzone) => item.Customer == dropzone)" ItemDropped="ItemUpdated" Elevation="16">
    <ChildContent>
        <MudPaper MinHeight="750px" Class="d-flex flex-column flex-1">
            <MudSimpleTable style="background-color: #7e6fff; color: #fffeff;">
                <thead>
                    <tr>
                        <th Class="table-first-col" style="font-size: 130%;">Patron</th>
                        <th Class="item-name" style="font-size: 130%;">Menu Items</th>
                        <th Class="item-quantity" style="font-size: 130%;">Quantity</th>
                        <th Class="item-price" style="font-size: 130%; text-align: right;">Price</th>
                    </tr>
                </thead>
            </MudSimpleTable>
            <MudList Class="mudlist-multi-patron-mode" style="background-color: #7e6fff;">
                @foreach (var customer in @StateContainer._customers) 
                {
                    @* <MudDivider DividerType="DividerType.Middle" Class="my-6"/> *@
                        <MudListItem Icon="@Icons.Material.Filled.EmojiEmotions"  Color="Color.Success" Text="@customer.Name" InitiallyExpanded="true" Class="customer-name" style="background-color: #7e6fff; color: #ffffff">
                            <NestedList>
                                <MudDropZone T="DropItem" Identifier="@customer.Name" Class="nested-item" style="background-color: #b3abf8;">
                                    <MudList>
                                        <MudListItem Dense="true" Class="pl-8" />
                                    </MudList>
                                </MudDropZone>
                            </NestedList>
                        </MudListItem>
                }
            </MudList>
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th style="width: 25%;"><MudTextField @bind-Value="_newCustomerName" Label="Add Patron For Large Orders"  OnKeyDown="@(e => OnKeyDown(e))" /></th>
                        <th style="width: 25%;"><MudButton Color="Color.Tertiary" OnClick="AddNewCustomer" Variant="Variant.Filled">Add Patron</MudButton></th>
                        <th style="width: 25%; text-align: right;"></th>
                        <th style="text-align: right;" Class="total-price">
                            <MudText style="font-weight: bold; font-size: 24px;">Total: $@string.Format("{0:0.00}", GetGrandTotal())</MudText>
                            <MudButton @onclick="PaymentPrompt" Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Pay Now</MudButton>
                        </th>
                    </tr>
                </thead>
            </MudSimpleTable>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem @onmouseover="@(context.menuItem.category != "combo" ? (() => ToggleOpen(context.menuItem.image)) : (context.menuItem.category == "combo" ? (() => ToggleOpen(context.menuItem.image)) : null))" @onmouseleave="@ToggleClose" style="background-color: #b3abf8;">
            <MudListItemText>
                <div class="item-info">
                    <span class="table-first-col">
                        <MudIconButton @onclick="ConfirmRemoveItem" Icon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled" Color="Color.Secondary" />
                    </span>
                    <span class="item-name">
                        <MudIconButton @onclick="@(() => OpenCustomize(context.menuItem))" Icon="@Icons.Material.TwoTone.Edit"  Variant="Variant.Filled" Color="Color.Tertiary" />
                        <MudTooltip ShowOnClick="true" ShowOnHover="false" ShowOnFocus="false">
                            <ChildContent>
                                <MudIconButton Icon="@Icons.Material.Filled.ImageSearch"  Variant="Variant.Filled" Color="Color.Tertiary" />
                            </ChildContent>
                            <TooltipContent>
                                <div class="d-flex flex-column pa-1">
                                    <MudImage Fluid="true" Src="@item_image" Width="100" Class="d-block mx-auto rounded-lg"/>
                                </div>
                            </TooltipContent>
                        </MudTooltip>
                        &emsp; &emsp; &emsp; &emsp; &emsp; 
                        @(context.menuItem.category != "combo" ? context.menuItem.name : (context.menuItem.category == "combo" ? context.menuItem.name + " + " + context.menuItem.side.name + " + " + context.menuItem.drink.name : null))
                    </span>
                    <span class="item-quantity">
                    <MudStack Row="true">
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity > 0 ? context.Quantity - 1 : context.Quantity))" />
                        <MudText style="font-weight: bold; ">@context.Quantity</MudText>
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity + 1))" />
                    </MudStack>
                    </span>
                    <span class="item-price">$@string.Format("{0:0.00}", (context.menuItem.price * context.Quantity))</span>
                </div>
            </MudListItemText>
        </MudListItem>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>
}





@* Loads the Layout Assuming only one customer is in the order *@
else
{
<MudDropContainer T="DropItem" Items="@StateContainer._items" ItemsSelector="@((item, dropzone) => item.Customer == dropzone)" ItemDropped="ItemUpdated" Elevation="16">
    <ChildContent>
        <MudPaper MinHeight="750px" Class="d-flex flex-column flex-1">
            <MudSimpleTable style="background-color: #7e6fff; color: #fffeff;">
                <thead>
                    <tr>
                        <th Class="table-first-col" style="font-size: 130%;">Patron</th>
                        <th Class="item-name" style="font-size: 130%;">Menu Items</th>
                        <th Class="item-quantity" style="font-size: 130%;">Quantity</th>
                        <th Class="item-price" style="font-size: 130%; text-align: right;">Price</th>
                    </tr>
                </thead>
            </MudSimpleTable>
            <MudList Class="mudlist-single-patron-mode" style="height:600px;background-color: #7e6fff;">
                @foreach (var customer in @StateContainer._customers) 
                {
                    <MudListItem Icon="@Icons.Material.Filled.EmojiEmotions"  Color="Color.Success" Text="@customer.Name" InitiallyExpanded="true" Class="customer-name" style="color: #ffffff">
                        <NestedList>
                            <MudDropZone T="DropItem" Identifier="@customer.Name" Class="nested-item"  style="background-color: #b3abf8;">
                                <MudList>
                                    <MudListItem Dense="true" Class="pl-8"/>
                                </MudList>
                            </MudDropZone>
                        </NestedList>
                    </MudListItem>
                }
                @* <MudPopover Open="@_isOrderImageOpen" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter">
                    <div class="d-flex flex-column pa-1">
                        <MudImage Fluid="true" Src="@item_image" Width="100" Class="d-block mx-auto rounded-lg"/>
                    </div>
                </MudPopover> *@
            </MudList>
            <MudSimpleTable>
                <thead>
                    <tr>
                        <th style="width: 25%;"><MudTextField @bind-Value="_newCustomerName" Label="Add Patron For Large Orders" OnKeyDown="@(e => OnKeyDown(e))" /></th>
                        <th style="width: 25%;"><MudButton Color="Color.Tertiary" OnClick="AddNewCustomer" Variant="Variant.Filled">Add Patron</MudButton></th>
                        <th style="width: 25%; text-align: right;"></th>
                        <th style="text-align: right;" class="total-price">
                            <MudText style="font-weight: bold; font-size: 24px;">Total: $@string.Format("{0:0.00}", GetGrandTotal())</MudText>
                            <MudButton  @onclick="PaymentPrompt" Color="Color.Tertiary" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send">Pay Now</MudButton>
                        </th>
                    </tr>
                </thead>
            </MudSimpleTable>
        </MudPaper>
    </ChildContent>
    <ItemRenderer>
        <MudListItem @onmouseover="@(context.menuItem.category != "combo" ? (() => ToggleOpen(context.menuItem.image)) : (context.menuItem.category == "combo" ? (() => ToggleOpen(context.menuItem.image)) : null))" @onmouseleave="@ToggleClose" style="background-color: #b3abf8;">
            <MudListItemText>
                <div class="item-info">
                    <span class="table-first-col">
                        <MudIconButton @onclick="ConfirmRemoveItem" Icon="@Icons.Material.Filled.DeleteForever" Variant="Variant.Filled" Color="Color.Secondary" />
                    </span>
                    <span class="item-name">
                        <MudIconButton @onclick="@(() => OpenCustomize(context.menuItem))" Icon="@Icons.Material.TwoTone.Edit"  Variant="Variant.Filled" Color="Color.Tertiary" />
                        <MudTooltip ShowOnClick="true" ShowOnHover="false" ShowOnFocus="false">
                            <ChildContent>
                                <MudIconButton Icon="@Icons.Material.Filled.ImageSearch"  Variant="Variant.Filled" Color="Color.Tertiary" />
                            </ChildContent>
                            <TooltipContent>
                                <div class="d-flex flex-column pa-1">
                                    <MudImage Fluid="true" Src="@item_image" Width="100" Class="d-block mx-auto rounded-lg"/>
                                </div>
                            </TooltipContent>
                        </MudTooltip>
                        &emsp; &emsp; &emsp; &emsp; &emsp; 
                        @(context.menuItem.category != "combo" ? context.menuItem.name : (context.menuItem.category == "combo" ? context.menuItem.name + " + " + context.menuItem.side.name + " + " + context.menuItem.drink.name : null))
                    </span>
                    <span class="item-quantity">
                    <MudStack Row="true">
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Remove" Color="Color.Secondary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity > 0 ? context.Quantity - 1 : context.Quantity))" />
                        <MudText style="font-weight: bold; ">@context.Quantity</MudText>
                        <MudIconButton  Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" Size="Size.Small" OnClick="@(() => UpdateQuantity(context, context.Quantity + 1))" />
                    </MudStack>
                    </span>
                    <span class="item-price">$@string.Format("{0:0.00}", (context.menuItem.price * context.Quantity))</span>
                </div>
            </MudListItemText>
        </MudListItem>
        <MudDivider/>
    </ItemRenderer>
</MudDropContainer>
}



    








@code {
    private Ingredient lettuce = new Ingredient { Name = "Lettuce", Quantity = "Regular" };
    private Ingredient tomato = new Ingredient { Name = "Tomato", Quantity = "Regular" };
    private Ingredient pickles = new Ingredient { Name = "Pickles", Quantity = "Regular" };
    private Ingredient onion = new Ingredient { Name = "Onion", Quantity = "Regular" };
    private Ingredient houseSauce = new Ingredient { Name = "House Sauce", Quantity = "Regular" };
    private Ingredient mayo = new Ingredient { Name = "Mayonnaise", Quantity = "Regular" };
    private Ingredient ketchup = new Ingredient { Name = "Ketchup", Quantity = "Regular" };
    private Ingredient jalapenos = new Ingredient { Name = "Jalapenos", Quantity = "Regular" };
    private Ingredient pepperJackCheese = new Ingredient { Name = "Pepper Jack Cheese", Quantity = "Regular" };
    private Ingredient spicyMayo = new Ingredient { Name = "Spicy Mayo", Quantity = "Regular" };
    private Ingredient swissCheese = new  Ingredient { Name = "Swiss Cheese", Quantity = "Regular" };
    private Ingredient mushrooms = new Ingredient { Name = "Mushrooms", Quantity = "Regular" };
    private Ingredient garlicAioli = new Ingredient { Name = "Garlic Aioli", Quantity = "Regular" };
    private Ingredient bacon = new Ingredient { Name = "Bacon", Quantity = "Regular" };
    private Ingredient cheddarCheese = new Ingredient { Name = "Cheddar Cheese", Quantity = "Regular" };
    private Ingredient bbqSauce = new Ingredient { Name = "BBQ Sauce", Quantity = "Regular" };
    private Ingredient chiliSauce = new Ingredient { Name = "Chili Sauce", Quantity = "Regular" };
    private Ingredient redOnion = new Ingredient { Name = "Red Onion", Quantity = "Regular" };
    private Ingredient ranchSauce = new Ingredient { Name = "Ranch Sauce", Quantity = "Regular" };
    private Ingredient pickle = new Ingredient { Name = "Pickle", Quantity = "Regular" };
    private Ingredient veganMayo = new Ingredient { Name = "Vegan Mayo", Quantity = "Regular" };
    private Ingredient avocado = new Ingredient { Name = "Avocado", Quantity = "Regular" };
    private Ingredient veganChipotleMayo = new Ingredient { Name = "Vegan Chipotle Mayo", Quantity = "Regular" };


    private string tableBackground_dark = "background-color: #7e6fff";
    private bool _isOrderImageOpen = false;
    private string item_image = "";

    private void ToggleOpen(string imgPath) {
        _isOrderImageOpen = !_isOrderImageOpen;
        item_image = imgPath;
    }

    private void ToggleClose() {
        _isOrderImageOpen = false;
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e)
{
    if (e.Key == "Enter" || e.Key == "NumpadEnter")
    {
        AddNewCustomer();
    }
}

    private void PaymentPrompt()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<PaymentPrompt>("Review your order and choose payment options:", new DialogParameters
        {
            { "OrderItems", StateContainer._items },
            { "GrandTotal", GetGrandTotal() }
        }, options);
    }

    

    private async Task ConfirmRemoveItem()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();        
        parameters.Add("ContentText", "Are you sure you want to Remove this Item?");
        parameters.Add("ButtonText", "Yes");
        var dialogResult = DialogService.Show <DialogConfirm> ("Confirm", parameters);
        var result = await dialogResult.Result;
        if (!result.Cancelled && bool.TryParse(result.Data.ToString(), out bool resultbool)) {
            StateContainer.RemoveOrderItemByID();
        }
    }

    private void OpenCustomize(MenuItem item) {
        StateContainer.itemToCustomize = item;
        NavigationManager.NavigateTo("/Browse");
        NavigationManager.NavigateTo("/Customize");
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Customer = dropItem.DropzoneIdentifier;
    }

    private decimal GetGrandTotal()
    {
        return @StateContainer._items.Sum(item => item.Quantity * item.menuItem.price);
    }
    public string GetTotal()
    {
        return GetGrandTotal().ToString();
    }

    private string _newCustomerName;

    private void AddNewCustomer()
    {
        if (_newCustomerName != null) {
            StateContainer.AddCustomer(new Customer { Name = _newCustomerName, InitiallyExpanded = false });
            _newCustomerName = string.Empty;
            StateHasChanged();
        } else {
            StateContainer.AddCustomer(new Customer { Name = "Patron " + (@StateContainer._customers.Count + 1).ToString(), InitiallyExpanded = false });
        }
    }

    private void UpdateQuantity(DropItem item, int newQuantity)
    {
        item.Quantity = newQuantity;
        StateHasChanged();
    }
}

<style>
    .table-first-col {
        width: 15%; 
        font-weight: bold;
    }
    .mudlist-multi-patron-mode {
        height: 650px; 
        overflow-y: auto;
    }
    .mudlist-single-patron-mode {
        height: 400px; 
        overflow-y: auto;
    }

    .item-info {
        display: flex;
        justify-content: space-between;
    }

    .customer-name {
        font-weight: bold;

    }

    .item-name{
        width: 65%;
        font-weight: bold;
    }
    .item-quantity{
        width: 10%;
        font-weight: bold;
    }
    .item-price {
        width: 10%;
        font-weight: bold;
        text-align: right;
    }

    .total-price{ 
        font-size: xx-large;
        font-weight: bold;
    }

    .nested-item {
        background-color: #ffffff;
    }

    .quantity-field {
        width: 10%;
    }
</style>




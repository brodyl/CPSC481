@inject StateContainer StateContainer
@inject NavigationManager NavigationManager


<MudDialog style="background-color: #1c1f22;">
    <DialogContent>
        
        @if(choosingSide) {<MudProgressLinear Color="Color.Warning" Size="Size.Medium" Rounded="true" Value="33" Class="my-7" />}
        @if(choosingDrink) {<MudProgressLinear Color="Color.Warning" Size="Size.Medium" Value="66" Rounded="true" Class="my-7" />}
        

        @if (choosingSide || choosingDrink) {
            @if (choosingSide) {
                    <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Warning" Size="Size.Large" @onclick="() => Cancel()"></MudIconButton>
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="px-5" style="color:#ffffff;"><b>Choose your side:</b></MudText>
            }
            @if (choosingDrink) {
                <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Warning" Size="Size.Large" @onclick="() => SidesMenu()"></MudIconButton>
                <MudText Typo="Typo.h4" Align="Align.Center" Class="px-5" style="color:#ffffff;"><b>Choose your drink:</b></MudText>
            }
            <MudGrid Class="d-flex align-center overflow-scroll" Height="100">
                @foreach (var item in currentMenu) {
                    <MudItem xs="4" Elevation="0">
                        <MudCard @onclick="() => checkType(item)">
                            <MudCardContent style="@(item.category == "sides" ? "height: 150px;" : item.category == "drinks" ? "height: 230px;" : null)">
                                <MudImage Fluid="true" Src="@item.image" Class="d-block mx-auto"/>
                                <MudText Typo="Typo.subtitle1" Align="Align.Center" Class="px-5"><b>@item.name</b></MudText>
                                <table Class="mx-auto">
                                    <tr>
                                        <td><MudText Typo="Typo.subtitle1" Align="Align.Center" Class="mr-2">$@item.price</MudText></td>

                                    @if (!string.IsNullOrWhiteSpace(item.tags)) {
                                        @if (item.tags.Contains("pork")) {<td><MudImage Src="/resources/pork-icon.svg" Width="20" Class="d-block mx-auto"/></td>}
                                        @if (item.tags.Contains("spicy")) {<td><MudImage Src="/resources/chilli-pepper-icon.svg" Width="20" Class="d-block mx-auto"/></td>}
                                        @if (item.tags.Contains("popular")) {<td><MudImage Src="/resources/like-button-icon.svg" Width="20" Class="d-block mx-auto"/></td>}
                                        @if (item.tags.Contains("vegetarian")) {<td><MudImage Src="/resources/leaves-icon.svg" Width="20" Class="d-block mx-auto"/></td>}
                                        @if (item.tags.Contains("GF")) {<td><MudImage Src="/resources/gluten-free-icon.svg" Width="20" Class="d-block mx-auto"/></td>}
                                    }
                                            
                                    </tr>
                                </table>
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        }

        @if (choosingSize) {
            <MudText Typo="Typo.h4" Align="Align.Center" Class="px-5" style="color:#ffffff;"><b>Select a size:</b></MudText>
            <table Class="mx-auto my-10">
                <tr>
                    @if (sizeSelected == 1) {
                        <td Class="px-10"><MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large">Small</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=2">Medium</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=3">Large</MudButton></td>
                    }
                    else if (sizeSelected == 2) {
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=1">Small</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large">Medium</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=3">Large</MudButton></td>
                    }
                    else {
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=1">Small</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Large" @onclick="() => sizeSelected=2">Medium</MudButton></td>
                        <td Class="px-10"><MudButton Variant="Variant.Filled" Color="Color.Warning" Size="Size.Large">Large</MudButton></td>
                    }
                </tr>
            </table>

            @if (choosingSalt) {
                <MudText Typo="Typo.h4" Align="Align.Center" Class="px-5 pt-10 mb-5" style="color:#ffffff;"><b>Select a salt level:</b></MudText>
                <table Class="mx-auto">
                    <tr>
                        <td><MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" Color="Color.Warning" Size="Size.Large" @onclick="() => reduceSalt()"></MudIconButton></td> 
                        <td><MudText Typo="Typo.h4" Align="Align.Center" Class="px-5" style="color:#ffffff;"><b>@saltLevel</b></MudText></td>
                        <td><MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" Color="Color.Warning" Size="Size.Large" @onclick="() => addSalt()"></MudIconButton></td>
                    </tr>
                </table>
            }
            @if(choosingSalt) {<MudButton Variant="Variant.Filled" Color="Color.Warning" FullWidth="true" class="mt-10" @onclick="() => DrinkMenu()">Next</MudButton>}
            @if(!choosingSalt) {<MudButton Variant="Variant.Filled" Color="Color.Warning" FullWidth="true" class="mt-10" @onclick="() => Submit()">Next</MudButton>}
        }

        @if (choosingSauces) {
            <MudText Typo="Typo.h4" Align="Align.Center" Class="px-5 pt-10 mb-5" style="color:#ffffff;"><b>Select up to 3 sauces:</b></MudText>
            <MudChipSet @bind-SelectedChips="selected" MultiSelection="true" class="d-flex justify-center">
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="BBQ" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Ketchup" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Mustard" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Honey Garlic" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Chipotle" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Garlic Aioli" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
                <MudChip Variant="Variant.Filled" Size="Size.Large" Text="Sriracha" Color="Color.Dark" SelectedColor="Color.Warning"></MudChip>
            </MudChipSet>

            <div class="d-flex flex-column align-center pt-10">
                @if (selected != null && selected.Length>3) {
                    <MudText Typo="Typo.h6" Color="Color.Warning">You've selected too many sauces! <b>The max is 3</b></MudText>
                }
                else if (selected != null && selected.Length>0) {
                    <MudText Typo="Typo.h6" Color="Color.Warning">You selected @string.Join(", ", selected.Select(chip=>chip.Text)).</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Warning" FullWidth="true" class="mt-10" @onclick="() => DrinkMenu()">Next</MudButton>
                }
                else {
                    <MudText Typo="Typo.h6" Color="Color.Warning">Nothing selected.</MudText>
                }
            </div>

            
        }


    </DialogContent>
    <DialogActions>
        @*<MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>*@
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private List<MenuItem> currentMenu = new();

    private bool choosingSize = false;
    private bool choosingSide = true;
    private bool choosingSalt = false;
    private bool choosingDrink = false;
    private bool choosingSauces = false;
    MudChip[] selected;

    private int sizeSelected = 2;
    private string saltLevel = "Regular";
    private string sauces;
    public MenuItem side;
    public MenuItem drink;
    

    public void Submit() {
        if (sizeSelected == 1) {drink.size = "Small";}
        if (sizeSelected == 2) {drink.size = "Medium";}
        if (sizeSelected == 3) {drink.size = "Large";}
        StateContainer.itemToCustomize.category = "combo";
        NavigationManager.NavigateTo("/Browse");
        NavigationManager.NavigateTo("/Customize");
        MudDialog.Close(DialogResult.Ok(true));

        MenuItem tempItem = new MenuItem() {  
                ID = 3, 
                category = "combo", 
                name = StateContainer.itemToCustomize.name,
                side = StateContainer.itemToCustomize.side, 
                drink = StateContainer.itemToCustomize.drink,
                price = 12.49m, 
                image = "/resources/combo.png",  
                imageSm = "/resources/combo.png", 
                imageLg = "/resources/combo.png", 
                Ingredients = new List<Ingredient> {},
                description = StateContainer.itemToCustomize.description +"\r\n" +StateContainer.itemToCustomize.side.description+ StateContainer.itemToCustomize.drink.description,
                Calories = StateContainer.itemToCustomize.Calories + StateContainer.itemToCustomize.side.Calories+ StateContainer.itemToCustomize.drink.Calories
            };

        StateContainer.itemToCustomize = tempItem;
        NavigationManager.NavigateTo("/browse/burgers");
        StateContainer.AddMenuItemToOrder();
        StateHasChanged();

    }
    
    void Cancel() => MudDialog.Cancel();

    public void SidesMenu() {
        currentMenu.Clear();
    
        currentMenu.Add(new MenuItem() { category = "sides", ID = 1, name = "8pc Chicken Nuggets", price = 6, image = "/resources/chickennuggets.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Enjoy 8 of our classic chicken nuggets, made with 100% seasoned chicken breast and no artificial flavours, colours or preservatives.",
            Calories = 400
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 2, name = "Poutine", price = 7, image = "/resources/poutine.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Our world famous poutine contains cheese curds imported directly from Quebec, hand churned to perfection. The gravy is an in house blend, with a secret recipe to wake up your taste buds.",
            Calories = 850
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 3, name = "Spicy Loaded Poutine", price = 9, image = "/resources/spicyloadedpoutine.png", tags="popular/spicy",
            Ingredients = new List<Ingredient> {},
            description = "Our world famous poutine with a twist. It still contains cheese curds imported directly from Quebec, but now they are paired with spicy pairings that are sure to have you coming back for more.",
            Calories = 950
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 4, name = "French Fries", price = 5, image = "/resources/frenchfries.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Our world famous fries are always a delicious choice. Cut from whole potatoes grown on Canadian farms, our fries are cooked to golden perfection in a vegetable oil blend.",
            Calories = 350
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 5, name = "Onion Rings", price = 5, image = "/resources/onionrings.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Savour our crispy onion rings that you will have you coming back again and again. Sweet onions wrapped in a crunch of perfectly crispy panko breading is sure to satisfy your taste buds.",
            Calories = 390
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 6, name = "Chicken Fries", price = 7, image = "/resources/chickenfries.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Our world famous fries meet our classic chicken nuggets in our delicious chicken fries.",
            Calories = 300
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 7, name = "8pc Dill Pickle Nuggets", price = 5, image = "/resources/chickennuggets.png", tags="vegetarian",
            Ingredients = new List<Ingredient> {},
            description = "A twist on 8 of our classic nuggets, made with pickles for a zesty experience like no other.",
            Calories = 200
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 8, name = "Loaded Baked Potato", price = 8, image = "/resources/bakedpotato.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Craving something a little more filling for your side? Try our loaded baked potato which is sure to satisfy.",
            Calories = 520
        });
        currentMenu.Add(new MenuItem() { category = "sides", ID = 9, name = "Signature Chilli", price = 6, image = "/resources/chilli.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Our signature Chili speaks for itself!",
            Calories = 750
        });
    
        choosingSide = true;
        choosingDrink = false;
    }

    public void checkType(MenuItem I) {
        
        if (I.category == "sides") {
            side = I;
            StateContainer.itemToCustomize.side = side;
            if (I.name == "French Fries") {
                choosingSide = false;
                choosingSize = true;
                choosingSalt = true;
            }
            else if (I.name == "8pc Chicken Nuggets" || I.name == "8pc Dill Pickle Nuggets") {
                choosingSide = false;
                choosingSauces = true;
            }
            else {
                DrinkMenu();
            }
            
        }

        if (I.category == "drinks") {
            drink = I;
            StateContainer.itemToCustomize.drink = drink;
            choosingSize = true;
            choosingDrink = false;
        }
    }

    public void DrinkMenu() {
        if (sizeSelected == 1) {side.size = "Small";}
        if (sizeSelected == 2) {side.size = "Medium";}
        if (sizeSelected == 3) {side.size = "Large";}
        if (side.name == "French Fries") {side.saltLevel = saltLevel;}
        if (selected != null) { side.dippingSauces = string.Join(" ", selected.Select(chip=>chip.Text));}

        currentMenu.Clear();
       currentMenu.Add(new MenuItem() { category = "drinks", ID = 1, name = "Hersheys Milkshake", price = 5, image = "/resources/chocolatemilkshake.png", tags="popular", 
            Ingredients = new List<Ingredient> {},
            description = "Indulge in a rich and creamy Hershey's Milkshake made with Hershey's chocolate syrup, blended with smooth vanilla ice cream and milk, topped with a swirl of whipped cream. A chocolate lover's dream come true!",
            Calories = 640
        });


        currentMenu.Add(new MenuItem() { category = "drinks", ID = 1, name = "Vanilla Milkshake", price = 5, image = "/resources/vanillamilkshake.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Savor the classic taste of a Vanilla Milkshake made with premium vanilla ice cream, cold milk, and a hint of sugar, blended to perfection. Simple, yet satisfying!",
            Calories = 550
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 3, name = "Oreo Milkshake", price = 5, image = "/resources/oreomilkshake.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Experience the irresistible Oreo Milkshake, featuring delicious vanilla ice cream, milk, and crushed Oreo cookies, blended together for a delightful cookies and cream flavor.",
            Calories = 580
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 4, name = "Strawberry Milkshake", price = 5, image = "/resources/strawberrymilkshake.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Enjoy a refreshing Strawberry Milkshake made with sweet strawberries, velvety vanilla ice cream, and milk, blended to create a perfect fruity and creamy delight.",
            Calories = 490
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 5, name = "Coke", price = 2, image = "/resources/coke.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Quench your thirst with an ice-cold Coca-Cola, the classic, bubbly beverage that pairs perfectly with any meal.",
            Calories = 140
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 6, name = "Diet Coke", price = 2, image = "/resources/dietcoke.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Stay refreshed with Diet Coke, a calorie-free alternative to the classic Coca-Cola, offering the same great taste without the guilt.",
            Calories = 0
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 7, name = "Sprite", price = 2, image = "/resources/sprite.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Brighten your day with a cool and crisp Sprite, a lemon-lime soda that's perfect for cleansing your palate and energizing your taste buds.",
            Calories = 140
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 8, name = "Root Beer", price = 2, image = "/resources/rootbeer.png", tags="popular",
            Ingredients = new List<Ingredient> {},
                description = "Savor the unique flavor of a frosty Root Beer, a timeless carbonated beverage featuring a blend of herbs, spices, and sweeteners that create a rich and satisfying taste.",
            Calories = 160
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 9, name = "Iced Tea", price = 2, image = "/resources/icedtea.png", tags="popular",
            Ingredients = new List<Ingredient> {},
            description = "Refresh yourself with a glass of Iced Tea, a classic drink made from freshly brewed tea leaves and chilled to perfection. Served with a slice of lemon for a zesty twist.",
            Calories = 90
        });

        currentMenu.Add(new MenuItem() { category = "drinks", ID = 10, name = "Fruitopia", price = 2, image = "/resources/fruitopia.png", tags="",
            Ingredients = new List<Ingredient> {},
            description = "Delight in the fruity taste of Fruitopia, a delicious fruit-flavored beverage that's bursting with a variety of natural fruit flavors. A perfect way to satisfy your sweet cravings.",
            Calories = 120
        });
        choosingSide = false;
        choosingSize = false;
        choosingSalt = false;
        choosingDrink = true;
        choosingSauces = false;
    }

    public void reduceSalt() {
        if (saltLevel == "Light") {saltLevel = "None";}
        if (saltLevel == "Regular") {saltLevel = "Light";}
        if (saltLevel == "Extra") {saltLevel = "Regular";}  
    }

    public void addSalt() {
        if (saltLevel == "Regular") {saltLevel = "Extra";}
        if (saltLevel == "Light") {saltLevel = "Regular";}
        if (saltLevel == "None") {saltLevel = "Light";}
    }

    Task showCombos() {
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync() {
        SidesMenu();
        await showCombos();
    }

}